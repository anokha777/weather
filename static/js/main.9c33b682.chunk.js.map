{"version":3,"sources":["store/actions/alertAction.ts","store/types.ts","component/Search.tsx","store/actions/weatherAction.ts","component/Alert.tsx","component/Weather.tsx","App.tsx","serviceWorker.ts","store/reducers/weatherReducer.ts","store/reducers/alertReducer.ts","store/index.ts","index.tsx"],"names":["setAlert","message","type","payload","Search","title","dispatch","useDispatch","useState","city","setCity","className","onSubmit","e","preventDefault","trim","a","fetch","res","ok","json","resData","Error","getWeather","placeholder","style","maxWidth","value","onChange","currentTarget","margin","Alert","onClose","onClick","justifyContent","Weather","data","fahrenheit","main","temp","toFixed","celsius","marginBottom","name","sys","country","alignItems","weather","description","src","icon","alt","humidity","pressure","wind","speed","App","weatherData","useSelector","state","loading","error","alertMsg","alert","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.9c33b682.chunk.js","sourcesContent":["import {SET_ALERT, AlertAction} from '../types'\n\nexport const setAlert = (message: string): AlertAction => {\n    return {\n        type: SET_ALERT,\n        payload: message\n    }\n}","export const GET_WEATHER = 'GET_WEATHER';\nexport const GET_LOADING = 'GET_LOADING';\nexport const SET_LOADING = 'SET_LOADING';\nexport const SET_ERROR = 'SET_ERROR';\nexport const SET_ALERT = 'SET_ALERT';\n\nexport interface Weather {\n    description: string;\n    icon: string;\n    id: number;\n    main: string;\n}\n\nexport interface WeatherData {\n    base: string;\n    clouds: {\n        all: number;\n    };\n    cod: number;\n    coord: {\n        lon: number;\n        lat: number;\n    };\n    dt: number;\n    id: number;\n    main: {\n        feels_like: number;\n        humidity: number;\n        pressure: number;\n        temp: number;\n        temp_max: number;\n        temp_min: number;\n    };\n    name: string;\n    sys: {\n        country: string;\n        id: number;\n        sunrise: number;\n        sunset: number;\n        type: number;\n    };\n    timezone: number;\n    visibility: number;\n    weather: Weather[];\n    wind: {\n        speed: number;\n        deg: number;\n    };\n\n}\nexport interface WeatherError {\n    cod: string;\n    message: string;\n}\n\nexport interface WeatherState {\n    data: WeatherData | null;\n    loading: boolean;\n    error: string;\n}\n\ninterface GetWeatherAction {\n    type: typeof GET_WEATHER;\n    payload: WeatherData;\n}\n\ninterface SetLoadingAction {\n    type: typeof SET_LOADING;\n} \n\ninterface SetErrorAction {\n    type: typeof SET_ERROR;\n    payload: string;\n}\n\nexport type WeatherAction = GetWeatherAction | SetLoadingAction | SetErrorAction;\n\nexport interface AlertAction {\n    type: typeof SET_ALERT;\n    payload: string;\n}\n\nexport interface AlertState {\n    message: string;\n}\n","import React, { FC, FormEvent, useState } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { setAlert } from '../store/actions/alertAction';\nimport { getWeather, setLoading } from '../store/actions/weatherAction';\n\ninterface SearchProps {\n    title: string;\n}\n\nconst Search: FC<SearchProps> = ( { title } )  => {\n    const dispatch = useDispatch();\n    const [city, setCity] = useState('');\n\n    const changeHandler = (e: FormEvent<HTMLInputElement>) => {\n        setCity(e.currentTarget.value);\n    }\n\n    const submitHandler = (e: FormEvent<HTMLFormElement>) => {\n        e.preventDefault();\n        if(city.trim() === '') {\n            return dispatch(setAlert('City is required.'));\n        }\n\n        dispatch(setLoading());\n        dispatch(getWeather(city));\n        setCity('');\n    }\n\n    return (\n        <div className=\"hero is-light has-text-centered\">\n            <div className=\"hero-body\">\n                <div className=\"container\">\n                   <h1 className=\"title\">{title}</h1> \n                   <form className=\"py-5\" onSubmit={submitHandler}>\n                       <input type=\"text\" \n                       className=\"input has-text-centered mb-2\" \n                       placeholder=\"Enter City Name\"\n                       style={{maxWidth: 300}}\n                       value={city}\n                       onChange={changeHandler}\n                       />\n                       <button className=\"button is-primary is-fullwidth\" style={{maxWidth: 300, margin: '0 auto'}}>Search</button>\n                   </form>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default Search;","import { ThunkAction } from 'redux-thunk';\nimport { RootState } from '..';\nimport { WeatherAction, WeatherData, WeatherError, GET_WEATHER, SET_LOADING, SET_ERROR } from '../types'\n\nexport const getWeather = (city: string): ThunkAction<void, RootState, null, WeatherAction> => {\n    return async dispatch => {\n        try {\n            const res = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=c705d08576479de79d511a165f4ff7b2`);\n            if(!res.ok) {\n                const resData: WeatherError = await res.json();\n                throw new Error(resData.message);\n            }\n            const resData: WeatherData = await res.json();\n            dispatch({\n                type: GET_WEATHER,\n                payload: resData\n            });\n        }catch(err) {\n            dispatch({\n                type: SET_ERROR,\n                payload: err.message\n            });\n        }\n    }\n}\n\nexport const setLoading = (): WeatherAction => {\n    return {\n        type: SET_LOADING\n    }\n}\n\nexport const setError = (): WeatherAction => {\n    return {\n        type: SET_ERROR,\n        payload: ''\n    }\n}","import React, { FC } from 'react';\n\ninterface AlertProps {\n    message: string;\n    onClose: () => void;\n}\n\nconst Alert: FC<AlertProps> = ( { message, onClose }) => {\n    return (\n        <div className=\"modal is-active has-text-centered\">\n            <div className=\"modal-background\" onClick={onClose}></div>\n            <div className=\"modal-card\">\n                <header className=\"modal-card-head has-background-danger\">\n    <p className=\"modal-card-title has-text-white\">{message}</p>\n                </header>\n                <footer className=\"modal-card-foot\" style={{justifyContent: 'center'}}>\n                    <button className=\"button\" onClick={onClose}>Close</button>\n                </footer>\n            </div>\n        </div>\n    );\n}\n\nexport default Alert;\n","import React, { FC } from 'react';\nimport { WeatherData } from '../store/types';\n\ninterface WeatherProps {\n    data: WeatherData;\n}\n\nconst Weather: FC<WeatherProps> = ({ data }) => {\n    const fahrenheit = (data.main.temp * 1.8 - 459.67).toFixed(2);\n    const celsius = (data.main.temp - 273.15).toFixed(2);\n    return (\n        <section className=\"section\">\n            <div className=\"container\">\n    <h1 className=\"title has-text-centered\" style={{marginBottom: 50}}>{data.name} - {data.sys.country}</h1>\n    <div className=\"level\" style={{alignItems: 'flex-start'}}>\n        <div className=\"level-item has-text-centered\">\n            <div>\n    <p className=\"heading\">{data.weather[0].description}</p>\n    <p className=\"title\">\n        <img src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`} alt=\"\"/>\n    </p>\n            </div>\n        </div>\n        <div className=\"level-item has-text-centered\">\n            <div>\n                <p className=\"heading\">Temp</p>\n                <div className=\"title\">\n                    <p className=\"mb-2\">{data.main.temp}</p>\n                    <p className=\"mb-2\">{fahrenheit}<sup>&#8457;</sup> </p>\n                    <p className=\"mb-2\">{celsius}<sup>&#8451;</sup> </p>\n                </div>\n            </div>\n        </div>\n        <div className=\"lavel-item has-text-centered\">\n            <div>\n                <p className=\"heading\">Humidity</p>\n                <p className=\"title\">{data.main.humidity} | </p>\n            </div>\n        </div>\n        <div className=\"lavel-item has-text-centered\">\n            <div>\n                <p className=\"heading\">Pressure</p>\n                <p className=\"title\">{data.main.pressure} | </p>\n            </div>\n        </div>\n        <div className=\"lavel-item has-t ext-centered\">\n            <div>\n                <p className=\"heading\">Wind</p>\n                <p className=\"title\">{data.wind.speed} m/s</p>\n            </div>\n        </div>\n    </div>\n            </div>\n        </section>\n    );\n}\n\nexport default Weather;","import React, { FC } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport './App.css';\n\nimport { RootState } from './store';\nimport Search from './component/Search';\nimport Alert from './component/Alert';\nimport Weather from './component/Weather';\nimport {setAlert} from './store/actions/alertAction';\nimport { setError } from './store/actions/weatherAction';\n\nconst App: FC = () => {\n  const dispatch = useDispatch();\n  const weatherData = useSelector((state: RootState) => state.weather.data);\n  const loading = useSelector((state: RootState) => state.weather.loading);\n  const error = useSelector((state: RootState) => state.weather.error);\n  const alertMsg = useSelector((state: RootState) => state.alert.message);\n\n  return (\n    <div className=\"has-text-centered\">\n     <Search title=\"Enter city name and press search button\" />\n     {loading ? <h2 className=\"is-size-3 py-2\">Loading...</h2> : weatherData && <Weather data={weatherData} /> }\n\n     {alertMsg && <Alert message={alertMsg} onClose={ () => dispatch(setAlert(''))} />}\n\n     {error && <Alert message={error} onClose={() => dispatch(setError())} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { WeatherState, WeatherAction, GET_WEATHER, SET_LOADING, SET_ERROR } from \"../types\";\n\nconst initialState: WeatherState = {\n     data: null,\n     loading: false,\n     error: '',\n}\n\nexport default (state = initialState, action: WeatherAction): WeatherState => {\n    switch(action.type) {\n        case GET_WEATHER:\n            return {\n                data: action.payload,\n                loading: false,\n                error: '',\n            }\n        case SET_LOADING:\n            return {\n                ...state,\n                loading: true\n            }\n        case SET_ERROR:\n            return {\n                ...state,\n                error: action.payload,\n                loading: false\n            }\n        default:\n            return state;\n    }\n}","// import { resolveTypeReferenceDirective } from \"typescript\";\nimport { AlertState, AlertAction, SET_ALERT } from \"../types\";\n\nconst initialState: AlertState = {\n    message: ''\n}\n\nexport default (state = initialState, action: AlertAction): AlertState => {\n    switch(action.type) {\n        case SET_ALERT:\n            return {\n                message: action.payload\n            }\n        default:\n            return state;\n    }\n}\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport {composeWithDevTools} from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport weatherReducer from './reducers/weatherReducer';\nimport alertReducer from './reducers/alertReducer';\n\nconst rootReducer = combineReducers({\n    weather: weatherReducer,\n    alert: alertReducer\n});\n\nconst store = createStore(\n    rootReducer,\n    composeWithDevTools(applyMiddleware(thunk))\n);\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport '../node_modules/bulma/css/bulma.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}